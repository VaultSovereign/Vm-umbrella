name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      node: ${{ steps.versions.outputs.node }}
      python: ${{ steps.versions.outputs.python }}
      rust: ${{ steps.versions.outputs.rust }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        run: |
          echo "node=20" >> $GITHUB_OUTPUT
          echo "python=3.11" >> $GITHUB_OUTPUT
          echo "rust=stable" >> $GITHUB_OUTPUT

  js_ts:
    name: js/ts checks
    needs: [ setup ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: ${{ needs.setup.outputs.node }} }
      - run: corepack enable
      - run: pnpm -v || npm i -g pnpm
      - run: pnpm install --frozen-lockfile || true
      - run: |
          if [ -f package.json ]; then \
            (pnpm run lint || true); \
            (pnpm run typecheck || true); \
            (pnpm test -- --reporter=dot || true); \
          else \
            echo "no package.json"; \
          fi

  python:
    name: python checks
    needs: [ setup ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: ${{ needs.setup.outputs.python }} }
      - run: python -m pip install --upgrade pip
      - run: |
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f pyproject.toml ]; then pip install ruff black pytest; fi
      - run: |
          ruff --version || true
          (ruff check . || true)
          (black --check . || true)
          (pytest -q || true)

  rust:
    name: rust checks
    needs: [ setup ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with: { toolchain: ${{ needs.setup.outputs.rust }} }
      - run: |
          (cargo fmt --all -- --check || true)
          (cargo clippy --all-targets --all-features -D warnings || true)
          (cargo build --locked || true)

